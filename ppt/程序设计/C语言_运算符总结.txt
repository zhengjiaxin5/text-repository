算数运算符 
	+ - * / % 
	% 取余运算符  取模运算符 
	  两个操作数必须都为整数	
 	  最终结果的符号与做操作数保持一致
	++ --
	  自增运算符 自减运算符
	  前++ ++i  先自加1，后参加运算。  
		    操作数必须为左值，结果也是左值
	  后++ i++  先取值，后自加1（自增运算符所在的语句执行完成之后）
	     	    操作数必须为左值，结果是一个字面值
赋值运算符
	=  简单赋值运算符，把右操作数的结果赋值给左操作数
	   左操作数必须为左值，右操作数可以是变量、常量、字面值、表达式
	   简单赋值运算符的优先级是倒数第二低，并不是最低的。
	+= -= *= \= %= &= |= <<= >>= ... 复合赋值运算符
	   都是一些特殊表达式的简写
	   i+=3  =>   i=i+3
关系运算符
	> < == != >= <=
	   运算规则与数学中的运算规则相同
	   注意C语言中关系运算符的写法
           关系运算符的结果   0 不成立 假   1 成立 真


逻辑运算符
	&& || ! 
	   运算规则同数学当中一样
	   结果在C语言里面是 0 假   1 真  其他语言里面（true false）
	   参与逻辑运算的时候的操作数的真假
	   0代表假  非0代表真
	&&   
	   真  真 => 真
	   真  假 => 假	
	   假  真 => 假
	   假  假 => 假
	||   
	   真  真 => 真
	   真  假 => 真	
	   假  真 => 真
	   假  假 => 假
	!
	   真 => 假
	   假 => 真
位运算符
	所有的位运算符所做的操作都是直接操作底层内存的二进制
	
        &  位与  二进制按位进行与运算
   	
        |  位或  二进制按位进行或运算
   	
        ~  位非	 二进制按位进行非运算  一元运算符
   	
        ^  位异或 二进制按位进行异或运算         a=a^b b= a^b 得a=b b=a
	   1 1 => 0                              a^b^b=a
	   0 1 => 1
	   1 0 => 1
 	   0 0 => 0
   	<< 
	   左移 把左操作数的二进制向左移动右操作数位
	        每移动一位相当于*2（不超过数据类型的表示范围，正整数）
  	>>
	   右移 把左操作数的二进制向右移动右操作数位
		每移动一位相当于/2（不超过数据类型的表示范围，正整数）
条件运算符
	? :  
	   条件运算符  三元运算符 三目运算符
	   操作数1 ? 操作数2 : 操作数3
  	   求操作数1的结果，结果为真或假
	   当为真时，执行操作数2，并把操作数2的结果作为整个条件表达式的结果
	   当为假时，执行操作数3，并把操作数3的结果作为整个条件表达式的结果
逗号运算符
	,
	   逗号运算符的优先级是最低的
	   整个逗号表达式的结果是取逗号右边的操作数的结果
	   i = 1, 2;  	// i=1， 整个表达式的结果是2
	   i = (1,2,3); // i=3
sizeof运算符
	sizeof
	   求后面括号里面的数据类型、变量、常量、字面值、表达式的结果的字节数
	   sizeof(int)  // 4
           sizeof(100)  // 4
	   sizeof(1+2)  // 4
	   sizeof不是函数，他是一个运算符，虽然使用方法跟函数很相似

C语言的表达式
	C语言中的运算符与操作数组成的符合C语言规则的式子
	1+2   3%2  sizeof(int)   1,2   1?2:3
 	sizeof(1+2+3%2)?1:2      i=100-3
C语言的语句
	表达式 + ;   
	i=100-3;       // 这就是语句
	printf("\n");  // 也是语句
	return 0;      // 这也是语句
	以分号;结尾的，都叫做语句
	






